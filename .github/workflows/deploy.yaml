name: deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main'}}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup-qemu
        uses: docker/setup-qemu-action@v2

      - name: setup-docker-build
        uses: docker/setup-buildx-action@v2

      - name: login-dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: build-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: jamm3e3333/strv-newsletter-go-vala-jakub:latest
          target: production
          build-args: |
            PROJECT_ROOT=/go/src/github.com/jamm3e3333/strv-newsletter

      - name: export-environment-variables
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
        run: |
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > vault_pass.txt
          ansible-vault decrypt ./env/vault.yml --vault-password-file vault_pass.txt
          rm vault_pass.txt
          
          grep -v '^#' ./env/vault.yml | sed 's/: /=/' > .env

      - name: scp-env-file
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: ".env"
          target: "~/"

      - name: scp-db-migrations
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: "./db/migrations"
          target: "~/"

      - name: deploy-app
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: 22
          script: |
            docker pull jamm3e3333/strv-newsletter-go-vala-jakub:latest

            set -o allexport
            source ~/.env
            set +o allexport

            ENV_VARS=$(grep -v '^#' ~/.env | xargs -I {} echo "--env-add {}")

            if [ $(docker service ls --filter name=strv-newsletter -q) ]; then
              echo "Service exists. Updating service..."
              docker service update \
                --image jamm3e3333/strv-newsletter-go-vala-jakub:latest \
                --replicas 2 \
                $ENV_VARS \
                --publish-add 3000 \
                --publish-add published=3000,target=3000 \
                strv-newsletter
            
              STATUS=$?
            else
              echo "Service does not exist. Creating new service..."
              docker service create \
                --name strv-newsletter \
                --replicas 2 \
                --publish published=3000,target=3000 \
                --env-file ~/.env \
                jamm3e3333/strv-newsletter-go-vala-jakub:latest
            
              STATUS=$?  # Capture the exit status of the update command
            fi
            
            if [ $STATUS -eq 0 ]; then
              echo "STRV Newsletter service successful. Running migrations..."
            
              set -o allexport
              source ~/.env
              set +o allexport

              goose postgres "$DATABASE_URL" -dir ~/db/migrations up status
            else
              echo "STRV Newsletter service successful failed. Skipping migrations."
              exit 1
            fi
        timeout-minutes: 2
