// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "STRV"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health/liveness": {
            "get": {
                "description": "Health check for liveness probe",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/health.Result"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/health.Result"
                        }
                    }
                }
            }
        },
        "/health/readiness": {
            "get": {
                "description": "Health check of the application",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/health.Result"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/health.Result"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Expose Prometheus metrics",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Metrics"
                ],
                "responses": {
                    "200": {
                        "description": "Prometheus metrics",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/client": {
            "post": {
                "description": "Creates a new client account with an email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Client"
                ],
                "summary": "Create a new client",
                "parameters": [
                    {
                        "type": "string",
                        "example": "application/json",
                        "description": "Content-Type",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Client data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/client.CreateClientReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{\"token\": \"token\"}",
                        "schema": {
                            "$ref": "#/definitions/client.CreateClientRes"
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"bad request\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "422": {
                        "description": "{\"error\": \"bad request\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "{\"error\": \"bad request\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/newsletter": {
            "get": {
                "description": "Get a paginated list of newsletters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Newsletter"
                ],
                "summary": "List newsletters with pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 5,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of newsletters per page",
                        "name": "pageSize",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of newsletters",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/newsletter.CreateNewsletterReq"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new newsletter with the specified name and optional description",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Newsletter"
                ],
                "summary": "Create a new newsletter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "application/json",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Newsletter details",
                        "name": "CreateNewsletterReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/newsletter.CreateNewsletterReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/newsletter/subscriber": {
            "post": {
                "description": "Registers a new email subscription to a newsletter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriber"
                ],
                "summary": "Create a new subscription",
                "parameters": [
                    {
                        "description": "Content-Type header",
                        "name": "header",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/subscriber.Header"
                        }
                    },
                    {
                        "description": "Subscription details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/subscriber.CreateSubscriptionReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscription created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/v1/newsletter/subscriber/unsubscribe": {
            "get": {
                "description": "Removes an email subscription using a verification code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriber"
                ],
                "summary": "Unsubscribe from a newsletter",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 12345,
                        "description": "Newsletter Public ID",
                        "name": "newsletter_public_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"ABC123\"",
                        "description": "Verification Code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"user@example.com\"",
                        "description": "Email address",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully unsubscribed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/v1/session": {
            "post": {
                "description": "Creates a new session for a user by validating the email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sessions"
                ],
                "summary": "Create a new session",
                "parameters": [
                    {
                        "type": "string",
                        "example": "application/json",
                        "description": "Content-Type",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Client data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/client.CreateSessionReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{\"token\": \"token\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "{\"error\": \"invalid credentials\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "client.CreateClientReq": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "client.CreateClientRes": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "client.CreateSessionReq": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "gin.H": {
            "type": "object",
            "additionalProperties": {}
        },
        "health.ComponentStatus": {
            "type": "object",
            "properties": {
                "component": {
                    "type": "string",
                    "example": "main"
                },
                "status": {
                    "enum": [
                        "up",
                        "down"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/health.Status"
                        }
                    ],
                    "example": "up"
                }
            }
        },
        "health.Result": {
            "type": "object",
            "properties": {
                "components": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/health.ComponentStatus"
                    }
                },
                "status": {
                    "enum": [
                        "up",
                        "down"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/health.Status"
                        }
                    ],
                    "example": "up"
                }
            }
        },
        "health.Status": {
            "type": "string",
            "enum": [
                "up",
                "down",
                "timeout"
            ],
            "x-enum-varnames": [
                "StatusUp",
                "StatusDown",
                "StatusTimeout"
            ]
        },
        "newsletter.CreateNewsletterReq": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "subscriber.CreateSubscriptionReq": {
            "type": "object",
            "required": [
                "email",
                "newsletter_public_id"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "newsletter_public_id": {
                    "type": "integer"
                }
            }
        },
        "subscriber.Header": {
            "type": "object",
            "required": [
                "value"
            ],
            "properties": {
                "value": {
                    "type": "string",
                    "example": "application/json"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "2.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "STRV Newsletter API",
	Description:      "API provides endpoints for newsletter",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
